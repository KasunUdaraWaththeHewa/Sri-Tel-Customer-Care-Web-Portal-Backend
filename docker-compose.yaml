services:
  kafka:
    container_name: st_kafka
    hostname: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER: PLAINTEXT://:9092

      KAFKA_CREATE_TOPICS: "test:1:1"
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
    networks:
      - st_sritel-network

  zookeeper:
    container_name: st_zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
    networks:
      - st_sritel-network


# Test Service
  nodejs:
    hostname: backend
    container_name: st_backend
    build: 
      context: ./nodejs/
      dockerfile: ./pnpm.Dockerfile
    restart: always
    ports:
      - 4901:4901
    volumes:
      - ./nodejs:/app
    working_dir: /app

    environment:
      - PORT=4901

    # command: ["pnpm", "i" ]
    # entrypoint: ["pnpm", "dev"]
    entrypoint: ["sh", "-c", "pnpm i && pnpm dev"]

    networks:
      - st_sritel-network  


# Notification Service
  notification:
    hostname: notification
    container_name: st_notification
    build: 
      context: ./notification/
      dockerfile: ./pnpm.Dockerfile
    restart: always
    ports:
      - 4902:4902
    volumes:
      - ./notification:/app
    working_dir: /app
    environment:
      - PORT=4902

    # entrypoint: ["pnpm", "dev"]
    entrypoint: ["sh", "-c", "pnpm i && pnpm dev"]

    networks:
      - st_sritel-network


  authservice:
    hostname: authservice
    container_name: st_authservice
    build: 
      context: ./authService/
      dockerfile: ./pnpm.Dockerfile
    restart: always
    ports:
      - 4907:4907
    volumes:
      - ./authService:/app
    working_dir: /app
    environment:
      - PORT=4907
      - MONGODB_URL=mongodb://mongodb-1:27017/authService

    # command: ["pnpm", "i;" ]

    # entrypoint: ["pnpm", "start"]
    # entrypoint: ["pnpm", "i;"  , "pnpm", "start"]
    entrypoint: ["sh", "-c", "pnpm i && pnpm start"]


    networks:
      - st_sritel-network

  billingservice:
    hostname: billingservice
    container_name: st_billingservice
    build: 
      context: ./billingService/
      dockerfile: ./pnpm.Dockerfile
    restart: always
    ports:
      - 4903:4903
    volumes:
      - ./billingService:/app
    working_dir: /app
    environment:
      - PORT=4903
      - MONGODB_URL=mongodb://mongodb-2:27017/billingService

    # command: ["pnpm", "i;" ]

    # entrypoint: ["pnpm", "i" , "&&" , "pnpm", "start"]
    # start.sh
    entrypoint: ["sh", "-c", "pnpm i && pnpm start"]
    networks:
      - st_sritel-network

# Chat Service
  chatservice:
    hostname: chatservice
    container_name: st_chatservice
    build: 
      context: ./chatService/
      dockerfile: ./pnpm.Dockerfile  # Assuming you are using pnpm for managing dependencies
    restart: always
    ports:
      - 4906:4906  # Mapping chat service port
    volumes:
      - ./chatService:/app  # Volume to mount the chat service code
    working_dir: /app
    environment:
      - PORT=4906
      - MONGODB_URL=mongodb://mongodb-chat:27017/chatService  # Environment variable for MongoDB connection
    entrypoint: ["sh", "-c", "pnpm i && pnpm start"]  # Install dependencies and start the service
    networks:
      - st_sritel-network

# Upload Service
  uploadservice:
    build:
      context: ./uploadService
      dockerfile: ./Dockerfile
    volumes:
      - ./uploadService:/app
      - st_upload:/app/uploads
    ports:
      - "4908:4908"
    environment:
      - PORT=4908
    command: air
    networks:
      - st_sritel-network


# File Server 

  fileserver:
    image: nginx:latest
    container_name: st_fileserver
    volumes:
      - st_upload:/usr/share/nginx/html/uploads:ro
    ports:
      - "4980:80"
    restart: unless-stopped





  bff:
    container_name: st_bff
    build:
      context: ./bff
      dockerfile: Dockerfile
      # dockerfile: gradle.Dockerfile
    ports:
      - "4900:4091"
    volumes:
      - ./bff/src:/app/src  # Mount source code for live updates
      - ./bff/target:/app/target  # Mount target directory to persist compiled code
    # environment:
    #   - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005


    command: mvn spring-boot:run
    # command: "./gradlew bootRun --continuous"
    # command: "./gradlew bootRun --continuous -Dorg.gradle.daemon=false -Dorg.gradle.unsafe.polling=true"

    networks:
      - st_sritel-network


  postgres-1:
    image: postgres:16-alpine
    container_name: st_postgres-1
    hostname: postgres-1
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nodejs
    ports:
      - 4931:5432
    volumes:
      - ./postgres-data:/var/lib/postgresql@16/data
    networks:
      - st_sritel-network

# Auth Service DB
  mongodb-1:
    container_name: st_mongodb-1
    hostname: mongodb-1
    image: mongo:latest
    ports:
      - "4941:27017"
    networks:
      - st_sritel-network



# Billing Service DB
  mongodb-2:
    container_name: st_mongodb-2
    hostname: mongodb-2
    image: mongo:latest
    ports:
      - "4942:27017"
    networks:
      - st_sritel-network

# Chat Service MongoDB
  mongodb-chat:
    container_name: st_mongodb_chat
    hostname: mongodb-chat
    image: mongo:latest
    ports:
      - "4943:27017"  # Mapping MongoDB port for chat service
    networks:
      - st_sritel-network



# Mail Service
  mail:
    container_name: st_mail
    hostname: mail
    image: mailhog/mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - st_sritel-network



networks:
  st_sritel-network:
    driver: bridge


volumes:
  st_upload: